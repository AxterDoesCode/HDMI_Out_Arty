$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $var wire 1 C CLK $end
  $var wire 1 D RST_N $end
  $var wire 8 E encode_d_in [7:0] $end
  $var wire 2 F encode_cd [1:0] $end
  $var wire 1 G encode_de $end
  $var wire 10 H encode [9:0] $end
  $scope module mkTMDS_encoder $end
   $var wire 1 C CLK $end
   $var wire 1 D RST_N $end
   $var wire 8 E encode_d_in [7:0] $end
   $var wire 2 F encode_cd [1:0] $end
   $var wire 1 G encode_de $end
   $var wire 10 H encode [9:0] $end
   $var wire 5 I cnt$port0__write_1 [4:0] $end
   $var wire 5 J cnt [4:0] $end
   $var wire 5 I cnt$D_IN [4:0] $end
   $var wire 1 O cnt$EN $end
   $var wire 10 # v__h5147 [9:0] $end
   $var wire 10 < v__h207 [9:0] $end
   $var wire 9 K IF_encode_d_in_BIT_0_THEN_1_ELSE_0__q1 [8:0] $end
   $var wire 8 $ IF_IF_encode_d_in_BIT_0_THEN_1_ELSE_0_PLUS_IF__ETC___d126 [7:0] $end
   $var wire 8 = IF_NOT_cnt_port0__read_SLE_0_4_5_AND_NOT_IF_IF_ETC___d127 [7:0] $end
   $var wire 8 > IF_cnt_port0__read_EQ_0b0_OR_IF_IF_encode_d_in_ETC___d128 [7:0] $end
   $var wire 5 L IF_IF_encode_d_in_BIT_0_THEN_1_ELSE_0_BIT_0_TH_ETC___d45 [4:0] $end
   $var wire 5 M IF_IF_encode_d_in_BIT_0_THEN_1_ELSE_0_BIT_0_TH_ETC___d57 [4:0] $end
   $var wire 5 N IF_IF_encode_d_in_BIT_0_THEN_1_ELSE_0_BIT_0_TH_ETC___d69 [4:0] $end
   $var wire 5 % IF_IF_encode_d_in_BIT_0_THEN_1_ELSE_0_BIT_0_TH_ETC___d75 [4:0] $end
   $var wire 5 & IF_IF_encode_d_in_BIT_0_THEN_1_ELSE_0_PLUS_IF__ETC___d97 [4:0] $end
   $var wire 5 ' IF_INV_IF_encode_d_in_BIT_0_THEN_1_ELSE_0_PLUS_ETC___d102 [4:0] $end
   $var wire 5 ? IF_NOT_IF_encode_d_in_BIT_0_THEN_1_ELSE_0_PLUS_ETC___d83 [4:0] $end
   $var wire 5 @ IF_NOT_cnt_port0__read_SLE_0_4_5_AND_NOT_IF_IF_ETC___d106 [4:0] $end
   $var wire 5 A IF_cnt_port0__read_EQ_0b0_OR_IF_IF_encode_d_in_ETC___d107 [4:0] $end
   $var wire 5 ( IF_encode_d_in_BIT_0_THEN_1_ELSE_0_PLUS_IF_enc_ETC___d28 [4:0] $end
   $var wire 1 ) IF_NOT_IF_encode_d_in_BIT_0_THEN_1_ELSE_0_PLUS_ETC___d37 $end
   $var wire 1 * IF_NOT_IF_encode_d_in_BIT_0_THEN_1_ELSE_0_PLUS_ETC___d43 $end
   $var wire 1 + IF_NOT_IF_encode_d_in_BIT_0_THEN_1_ELSE_0_PLUS_ETC___d49 $end
   $var wire 1 , IF_NOT_IF_encode_d_in_BIT_0_THEN_1_ELSE_0_PLUS_ETC___d55 $end
   $var wire 1 - IF_NOT_IF_encode_d_in_BIT_0_THEN_1_ELSE_0_PLUS_ETC___d61 $end
   $var wire 1 . IF_NOT_IF_encode_d_in_BIT_0_THEN_1_ELSE_0_PLUS_ETC___d67 $end
   $var wire 1 / IF_NOT_IF_encode_d_in_BIT_0_THEN_1_ELSE_0_PLUS_ETC___d73 $end
   $var wire 1 B IF_cnt_port0__read_EQ_0b0_OR_IF_IF_encode_d_in_ETC___d109 $end
   $var wire 1 0 IF_encode_d_in_BIT_0_THEN_1_ELSE_0_BIT_0_XOR_e_ETC___d35 $end
   $var wire 1 1 IF_encode_d_in_BIT_0_THEN_1_ELSE_0_BIT_0_XOR_e_ETC___d42 $end
   $var wire 1 2 IF_encode_d_in_BIT_0_THEN_1_ELSE_0_BIT_0_XOR_e_ETC___d48 $end
   $var wire 1 3 IF_encode_d_in_BIT_0_THEN_1_ELSE_0_BIT_0_XOR_e_ETC___d54 $end
   $var wire 1 4 IF_encode_d_in_BIT_0_THEN_1_ELSE_0_BIT_0_XOR_e_ETC___d60 $end
   $var wire 1 5 IF_encode_d_in_BIT_0_THEN_1_ELSE_0_BIT_0_XOR_e_ETC___d66 $end
   $var wire 1 6 IF_encode_d_in_BIT_0_THEN_1_ELSE_0_PLUS_IF_enc_ETC___d29 $end
   $var wire 1 7 INV_INV_IF_encode_d_in_BIT_0_THEN_1_ELSE_0_BIT_ETC___d41 $end
   $var wire 1 8 INV_INV_INV_IF_encode_d_in_BIT_0_THEN_1_ELSE_0_ETC___d47 $end
   $var wire 1 9 INV_INV_INV_INV_IF_encode_d_in_BIT_0_THEN_1_EL_ETC___d53 $end
   $var wire 1 : INV_INV_INV_INV_INV_IF_encode_d_in_BIT_0_THEN__ETC___d59 $end
   $var wire 1 ; INV_INV_INV_INV_INV_INV_IF_encode_d_in_BIT_0_T_ETC___d65 $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b1101010101 #
b00000000 $
b01000 %
b00000 &
b00010 '
b01000 (
1)
1*
1+
1,
1-
1.
1/
00
11
02
13
04
15
06
17
18
19
1:
1;
b1000000000 <
b00000000 =
b00000000 >
b00010 ?
b00010 @
b00010 A
1B
1C
0D
b11111111 E
b11 F
1G
b1000000000 H
b00010 I
b01010 J
b000000001 K
b00011 L
b00101 M
b00111 N
1O
#1
0C
#2
b11010 ?
b11010 @
b11010 A
1C
b11010 I
b00010 J
#3
0C
#4
b0011111111 <
b11111111 =
b11111111 >
b10010 ?
b00000 @
b00000 A
0B
1C
b0011111111 H
b00000 I
b11010 J
#5
0C
#6
b1000000000 <
b00000000 >
b11000 ?
b00110 @
b11000 A
1B
1C
b1000000000 H
b11000 I
b00000 J
#7
0C
#8
b0011111111 <
b11111111 >
b10000 ?
b11110 @
b11110 A
0B
1C
b0011111111 H
b11110 I
b11000 J
#9
0C
#10
b10110 ?
b00100 @
b00100 A
1C
b00100 I
b11110 J
#11
0C
#12
b1000000000 <
b00000000 =
b00000000 >
b11100 ?
b11100 @
b11100 A
1B
1C
b1000000000 H
b11100 I
b00100 J
#13
0C
#14
b0011111111 <
b11111111 =
b11111111 >
b10100 ?
b00010 @
b00010 A
0B
1C
b0011111111 H
b00010 I
b11100 J
#15
0C
#16
b1000000000 <
b00000000 =
b00000000 >
b11010 ?
b11010 @
b11010 A
1B
1C
b1000000000 H
b11010 I
b00010 J
#17
0C
#18
b0011111111 <
b11111111 =
b11111111 >
b10010 ?
b00000 @
b00000 A
0B
1C
b0011111111 H
b00000 I
b11010 J
#19
0C
